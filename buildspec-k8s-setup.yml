version: 0.2

phases:
  install:
    commands:
      - apt-get update && sudo apt-get install -y apt-transport-https
      - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
      - apt-get update -y
      - apt-get install -y dpkg kubectl
      - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator
      - chmod +x aws-iam-authenticator
      - mv ./aws-iam-authenticator /usr/local/bin
      - ACCOUNT_ID=`aws sts get-caller-identity --output text --query 'Account'`
      - aws eks update-kubeconfig --name bootifulmicropizza-eks-cluster --region eu-west-1 --role-arn arn:aws:iam::$ACCOUNT_ID:role/bootifulmicropizza-eks-cluster-cloudformation-role
  build:
    commands:
      - AWS_REGION=eu-west-1
      - ACCOUNT_ID=`aws sts get-caller-identity --output text --query 'Account'`
      - STACK_NAME=bootifulmicropizza-eks-cluster
      - # Get the NodeInstanceRole from the CF exports and edit the aws-auth-cm.yaml file to allow the nodes to register in the K8S cluster.
      - NODE_INSTANCE_ROLE=`aws cloudformation list-exports --region $AWS_REGION --query "Exports[?Name=='$STACK_NAME-NodeInstanceRole'].Value" --output text`
      - # Update the k8s config to allow the nodes to join the K8S cluster
      - cat k8s/aws-auth-cm.yaml | sed "s#ROLE_ARN#$NODE_INSTANCE_ROLE#g" | sed "s#AWS_ACCOUNT_ID#$ACCOUNT_ID#g" | kubectl apply -f -
      - # Register admin account
      - kubectl apply -f k8s/eks-admin-service-account.yaml
      - curl -o k8s-dashboard.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml
      - kubectl apply -f k8s-dashboard.yaml
